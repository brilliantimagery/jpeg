// https://www.youtube.com/watch?v=Kv1Hiv3ox8I
//https://www.ece.ucdavis.edu/cerl/reliablejpeg/compression/

use std::f64::consts::PI;

const SOF0: u16 = 0xFFC0;  // Baseline DCT
const SOF3: u16 = 0xFFC3;  // Lossless Huffman Encoding

const DHT: u16 = 0xFFC4;  // Define Huffman table(s)

const SOI: u16 = 0xFFD8;  // Start of image
const EOI: u16 = 0xFFD9;  // End of image
const SOS: u16 = 0xFFDA;  // Start of scan
const DQT: u16 = 0xFFDB;  // Define quantization table(s)+

// input types "jfif"
pub struct JPEGEncoder {
    y: Vec<Vec<u8>>,
    cb: Vec<Vec<u8>>,
    cr: Vec<Vec<u8>>,
    // image: Vec<u8>,
    width: usize,
    height: usize
}

impl JPEGEncoder {
    pub fn from_rgb(raw_image: Vec<u8>, width: usize, height: usize, format: String) {
        let p_ = 8_u8;

        let raw_image = rgb_to_ycbcr(raw_image);
        let ((y, cb, cr), width, height) = reshape_and_split_channels(raw_image, width, height);
        let y = break_into_8x8_blocks(y, width, height);
        let cb = break_into_8x8_blocks(cb, width, height);
        let cr = break_into_8x8_blocks(cr, width, height);
        let cb = level_shift(cb, p_);
        let cr = level_shift(cr, p_);        
    }

    pub fn save(&self, file: String) {

    }
}


// pub fn encode(raw_image: Vec<u8>, width: usize, height: usize, format: String) {
//     let raw_image = rgb_to_ycbcr(raw_image);
//     let (raw_image, width, height) = reshape_and_split_channels(raw_image, width, height);

//     ()
// }

fn fdct(block: &Vec<i8>, tqi: u8) {
    // Svu = DCT coefficient at horizontal frequency u, vertical frequency v

    // quantization_table = [[16, 11, 10, 16, 24, 40, 51, 61],
    //                       [12, 12, 14, 19, 26, 58, 60, 55],
    //                       [14, 13, 16, 24, 40, 57, 69]]
    // page 143
    // let lumiance_qt = [[16.0, 11.0, 10.0, 16.0, 24.0, 40.0, 51.0, 61.0],
    //                                [12.0, 12.0, 14.0, 19.0, 26.0, 58.0, 60.0, 55.0],
    //                                [14.0, 13.0, 16.0, 24.0, 40.0, 57.0, 69.0, 56.0],
    //                                [14.0, 17.0, 22.0, 29.0, 51.0, 87.0, 80.0, 62.0],
    //                                [18.0, 22.0, 37.0, 56.0, 68.0, 109.0, 103.0, 77.0],
    //                                [24.0, 35.0, 55.0, 64.0, 81.0, 104.0, 113.0, 92.0],
    //                                [49.0, 64.0, 78.0, 87.0, 103.0, 121.0, 120.0, 101.0],
    //                                [72.0, 92.0, 95.0, 98.0, 112.0, 100.0, 103.0, 99.0],];

    // let crominance_qt = [[17.0, 18.0, 24.0, 47.0, 99.0, 99.0, 99.0, 99.0],
    //                                  [18.0, 21.0, 26.0, 66.0, 99.0, 99.0, 99.0, 99.0],
    //                                  [24.0, 26.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0],
    //                                  [47.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0],
    //                                  [99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0],
    //                                  [99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0],
    //                                  [99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0],
    //                                  [99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0],];

    let lumiance_qt = Vec::from([16.0, 11.0, 10.0, 16.0, 24.0, 40.0, 51.0, 61.0, 12.0, 12.0, 14.0, 19.0, 26.0, 58.0, 60.0, 55.0, 14.0, 13.0, 16.0, 24.0, 40.0, 57.0, 69.0, 56.0, 14.0, 17.0, 22.0, 29.0, 51.0, 87.0, 80.0, 62.0, 18.0, 22.0, 37.0, 56.0, 68.0, 109.0, 103.0, 77.0, 24.0, 35.0, 55.0, 64.0, 81.0, 104.0, 113.0, 92.0, 49.0, 64.0, 78.0, 87.0, 103.0, 121.0, 120.0, 101.0, 72.0, 92.0, 95.0, 98.0, 112.0, 100.0, 103.0, 99.0]);
  
    let crominance_qt = Vec::from([17.0, 18.0, 24.0, 47.0, 99.0, 99.0, 99.0, 99.0, 18.0, 21.0, 26.0, 66.0, 99.0, 99.0, 99.0, 99.0, 24.0, 26.0, 56.0, 99.0, 99.0, 99.0, 99.0, 99.0, 47.0, 66.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0]);
                                     

    let mut dct_coeffs: Vec<f64> = Vec::with_capacity(64);

    for vu in 0..64 {
        let u = (vu % 8) as f64;
        let v = (vu / 8) as f64;
        let cu = if u == 0.0 { 1.0 / 2.0_f64.sqrt() } else { 1.0 };
        let cv = if u == 0.0 { 1.0 / 2.0_f64.sqrt() } else { 1.0 };
        let mut block_sum = 0.0;
        for sample in block.iter() {
            let mut outer_sum = 0.0;
            for x in 0..8 {
                let mut inner_sum = 0.0;
                for y in 0..8 {
                    inner_sum += *sample as f64 * ((2 * x + 1) as f64 * u * PI / 16.0).cos() * ((2 * y + 1) as f64 * v * PI / 16.0).cos()
                }
                outer_sum += inner_sum;
            }
            block_sum += 1.0 / 4.0 * cu * cv * outer_sum;
        }
        dct_coeffs.push(block_sum);        
    }

    let table = if tqi == 1 {
        lumiance_qt
    } else {
        crominance_qt
    };

    let sqvu: Vec<f64> = dct_coeffs.iter().zip(table.iter()).map(|(s, q)| (s / q).round()).collect();



}

fn level_shift(channel: Vec<Vec<u8>>, p_: u8) -> Vec<Vec<i8>> {
    let shift = 2_i16.pow(p_ as u32- 1);
    let channel: Vec<Vec<i8>> = channel.iter().map(|i| i.iter().map(|i| (*i as i16 - shift) as i8).collect()).collect();

    channel
}

fn break_into_8x8_blocks(raw_image: Vec<u8>, width: usize, height: usize) -> Vec<Vec<u8>> {
    let mut image: Vec<Vec<u8>> = Vec::with_capacity((width / 8) * (height * 8));

    for _ in 0..(width / 8) * (height / 8) {
        image.push(Vec::with_capacity(8 * 8));
    }

    let blocks_wide = width / 8;
    for (i, val) in raw_image.iter().enumerate() {
        let block_in_row = (i % width) / 8;
        let block_row_in_column = i / width / 8;

        image[block_row_in_column * blocks_wide + block_in_row].push(*val);
    }

    image
}

fn reshape_and_split_channels(raw_image: Vec<u8>, width: usize, height: usize) -> ((Vec<u8>, Vec<u8>, Vec<u8>), usize, usize) {

    let w = if width % 16 == 0 { width } else { width - width % 16 };
    let h = if height % 16 == 0 { height } else { height - height % 16};

    let mut y_: Vec<u8> = Vec::with_capacity(w * h);
    let mut cb_: Vec<u16> = Vec::with_capacity(w * h);
    let mut cr_: Vec<u16> = Vec::with_capacity(w * h);

    for i in 0..(raw_image.len() / 3) {
        let x = i % width;
        let y = i / width;
        if y == h {
            break;
        }
        if x < w {
            y_.push(raw_image[i * 3]);
            cb_.push(raw_image[i * 3 + 1] as u16);
            cr_.push(raw_image[i * 3 + 2] as u16);
        }
    }

    let mut cb: Vec<u8> = Vec::with_capacity((w / 2) * (h / 2));
    let mut cr: Vec<u8> = Vec::with_capacity((w / 2) * (h / 2));

    for i in 0..(y_.len() / (2 * 2)) {
        let j = (i / (w / 2)) * w + i * 2;

        cb.push(((cb_[j] + cb_[j + 1] + cb_[j + w] + cb_[j + 1 + w]) / 4) as u8);
        cr.push(((cr_[j] + cr_[j + 1] + cr_[j + w] + cr_[j + 1 + w]) / 4) as u8);
    }

    ((y_, cb, cr), w, h)
}

fn rgb_to_ycbcr(image: Vec<u8>) -> Vec<u8> {
    let mut converted_image: Vec<u8> = Vec::with_capacity(image.len());

    for i in 0..(image.len() / 3) {
        let r = image[i * 3] as f32 / 255.0;
        let g = image[i * 3 + 1] as f32 / 255.0;
        let b = image[i * 3 + 2] as f32 / 255.0;

        // let y = 0.299 * r + 0.587 * g + 0.114 * b;
        // let cb = 128.0 - 0.1687 * r - 0.3313 * g + 0.5 * b;
        // let cr = 128.0 + 0.5 * r - 0.4187 * g - 0.0813 * b;

        let y = 16.0 + 65.481 * r + 128.553 * g + 24.966 * b;
        let cb = 128.0 - 37.797 * r - 74.203 * g + 112.0 * b;
        let cr = 128.0 + 112.0 * r - 93.786 * g - 18.214 * b;

        converted_image.push(y as u8);
        converted_image.push(cb as u8);
        converted_image.push(cr as u8);
    }

    converted_image
}


#[cfg(test)]
mod tests {
    extern crate test;

    use std::env;
    use std::fs::File;
    use std::io::Read;
    use std::path::Path;
    use test::Bencher;
    
    use std::iter::Zip;

    use super::*;

    #[test]
    fn rgb_to_ycbcr_good() {
        let input_image: Vec<u8> = Vec::from([155, 90, 30, 18, 196, 18]);
        let expected_image: Vec<u8> = Vec::from([104, 92, 160, 121, 76, 62]);

        let actual_image = rgb_to_ycbcr(input_image);

        for (expected, actual) in expected_image.iter().zip(actual_image.iter()) {
            assert!(expected == actual);
        }
    }
    
    #[test]
    fn reshape_and_split_channels_good() {
        let input_image = input_image_34x34();
        let expected_y = input_image_34x34_y();
        let expected_cb = input_image_34x34_cb();
        let expected_cr = input_image_34x34_cr();

        let ((y, cb, cr), width, height) = reshape_and_split_channels(input_image, 34, 34);

        assert_eq!(y, expected_y);
        assert_eq!(cb, expected_cb);
        assert_eq!(cr, expected_cr);
        assert_eq!(width, 32);
        assert_eq!(height, 32);
    }

    #[test]
    fn break_into_8x8_good() {
        let cb = input_image_34x34_cb();
        let actual_cb = break_into_8x8_blocks(cb, 16, 16);
        let expected_cb = split_input_image_34x34_cb();

        assert_eq!(actual_cb, expected_cb);
    }

    #[test]
    fn level_shift_good() {
        let input_cb = split_input_image_34x34_cb();
        let actual_cb = level_shift(input_cb, 8);

        let expected_cb: Vec<Vec<i8>> = split_and_shifted_input_image_34x34_cb();

        assert_eq!(actual_cb, expected_cb);
    }

    #[test]
    fn fdct_good() {
        let block = &split_and_shifted_input_image_34x34_cb()[0];

        fdct(&block, 1);
    }

    fn split_and_shifted_input_image_34x34_cb() -> Vec<Vec<i8>> {
        Vec::from([Vec::from([-43, 89, -84, 15, 26, 74, -49, -36, -15, -20, -17, 70, 19, -11, -26, 34, -29, 18, -4, 23, -15, -29, 32, 16, 35, 40, 11, -62, -16, -25, -19, -62, -73, -5, -43, -22, -27, -9, 84, 22, -19, 62, 20, -19, -43, 8, 31, -27, -21, 40, 35, -32, -37, 43, -1, 47, 10, 27, -3, -34, -8, -9, -60, 0]),
                   Vec::from([5, 32, -49, 1, 21, 30, -4, 64, 57, -3, 48, 1, -16, 24, 107, -65, -45, 7, -18, 55, 12, -56, 43, -19, 21, -41, 23, 29, 10, -42, 48, -45, -25, 7, 3, -22, -21, 38, -14, -32, -76, 37, 25, 22, 43, -29, -14, -7, -5, -31, 7, 57, 9, -5, 50, 11, -30, -30, -55, 13, 23, 20, 2, -8]),
                   Vec::from([67, -63, 57, 18, 40, -19, -7, -34, 29, -23, -25, -23, 63, 9, -1, -5, -3, 7, 24, 16, -60, 10, 0, -49, 4, -4, 44, -77, -13, -9, -9, -75, 13, 15, 87, -12, 70, 32, 60, -14, 27, -36, -36, -11, 47, -3, -54, 21, -5, 43, 67, 46, 4, -79, 19, -20, 6, -11, -7, 4, 10, 21, 16, 43]),
                   Vec::from([-34, 10, 22, -57, -2, 1, -18, -35, -1, -22, -6, 8, -67, -6, 1, -49, -41, 43, -2, 47, -53, -28, -5, 18, 2, -83, -29, -3, 85, -4, 62, -1, -1, 23, -35, 11, 30, 46, 64, -32, 45, -45, 77, 48, -13, -21, -19, -40, 34, -1, -76, 25, -7, -20, 6, -15, -18, 13, -6, 50, -10, 11, -18, -10])])
    }

    fn split_input_image_34x34_cb() -> Vec<Vec<u8>> {
        Vec::from([Vec::from([85, 217, 44, 143, 154, 202, 79, 92, 113, 108, 111, 198, 147, 117, 102, 162, 99, 146, 124, 151, 113, 99, 160, 144, 163, 168, 139, 66, 112, 103, 109, 66, 55, 123, 85, 106, 101, 119, 212, 150, 109, 190, 148, 109, 85, 136, 159, 101, 107, 168, 163, 96, 91, 171, 127, 175, 138, 155, 125, 94, 120, 119, 68, 128]),
                   Vec::from([133, 160, 79, 129, 149, 158, 124, 192, 185, 125, 176, 129, 112, 152, 235, 63, 83, 135, 110, 183, 140, 72, 171, 109, 149, 87, 151, 157, 138, 86, 176, 83, 103, 135, 131, 106, 107, 166, 114, 96, 52, 165, 153, 150, 171, 99, 114, 121, 123, 97, 135, 185, 137, 123, 178, 139, 98, 98, 73, 141, 151, 148, 130, 120]),
                   Vec::from([195, 65, 185, 146, 168, 109, 121, 94, 157, 105, 103, 105, 191, 137, 127, 123, 125, 135, 152, 144, 68, 138, 128, 79, 132, 124, 172, 51, 115, 119, 119, 53, 141, 143, 215, 116, 198, 160, 188, 114, 155, 92, 92, 117, 175, 125, 74, 149, 123, 171, 195, 174, 132, 49, 147, 108, 134, 117, 121, 132, 138, 149, 144, 171]),
                   Vec::from([94, 138, 150, 71, 126, 129, 110, 93, 127, 106, 122, 136, 61, 122, 129, 79, 87, 171, 126, 175, 75, 100, 123, 146, 130, 45, 99, 125, 213, 124, 190, 127, 127, 151, 93, 139, 158, 174, 192, 96, 173, 83, 205, 176, 115, 107, 109, 88, 162, 127, 52, 153, 121, 108, 134, 113, 110, 141, 122, 178, 118, 139, 110, 118])])
    }

    fn input_image_34x34_cr() -> Vec<u8> {
        Vec::from([188, 87, 148, 127, 126, 171, 62, 61, 81, 169, 69, 83, 127, 115, 130, 133, 137, 138, 110, 179, 142, 128, 140, 170, 180, 138, 81, 63, 182, 119, 180, 190, 118, 180, 167, 120, 101, 194, 135, 159, 141, 150, 87, 124, 149, 139, 141, 117, 101, 209, 135, 79, 171, 81, 73, 98, 139, 159, 138, 143, 165, 148, 69, 160, 133, 72, 191, 122, 115, 47, 98, 102, 143, 100, 110, 118, 172, 57, 167, 177, 119, 122, 162, 80, 120, 98, 97, 99, 138, 146, 98, 108, 208, 114, 65, 170, 97, 126, 86, 78, 147, 65, 65, 119, 72, 100, 134, 98, 137, 123, 125, 179, 147, 144, 103, 144, 85, 172, 92, 189, 152, 60, 148, 107, 126, 109, 175, 155, 132, 120, 52, 73, 105, 143, 180, 122, 137, 135, 196, 86, 97, 104, 158, 81, 100, 194, 119, 78, 165, 66, 130, 207, 178, 133, 89, 63, 174, 132, 116, 146, 72, 97, 68, 130, 137, 127, 145, 118, 157, 170, 156, 215, 153, 105, 78, 91, 71, 135, 75, 107, 75, 127, 212, 187, 153, 165, 139, 105, 91, 66, 83, 98, 137, 144, 84, 87, 151, 97, 67, 134, 74, 127, 51, 79, 147, 174, 176, 148, 112, 109, 137, 177, 189, 86, 162, 125, 108, 131, 123, 89, 124, 109, 153, 110, 120, 60, 175, 169, 107, 75, 152, 87, 87, 125, 175, 99, 146, 100, 122, 94, 151, 118, 209, 138, 220, 172, 142, 181, 95, 129, 135, 133, 114, 125, 59, 131])
    }

    fn input_image_34x34_cb() -> Vec<u8> {
        Vec::from([85, 217, 44, 143, 154, 202, 79, 92, 133, 160, 79, 129, 149, 158, 124, 192, 113, 108, 111, 198, 147, 117, 102, 162, 185, 125, 176, 129, 112, 152, 235, 63, 99, 146, 124, 151, 113, 99, 160, 144, 83, 135, 110, 183, 140, 72, 171, 109, 163, 168, 139, 66, 112, 103, 109, 66, 149, 87, 151, 157, 138, 86, 176, 83, 55, 123, 85, 106, 101, 119, 212, 150, 103, 135, 131, 106, 107, 166, 114, 96, 109, 190, 148, 109, 85, 136, 159, 101, 52, 165, 153, 150, 171, 99, 114, 121, 107, 168, 163, 96, 91, 171, 127, 175, 123, 97, 135, 185, 137, 123, 178, 139, 138, 155, 125, 94, 120, 119, 68, 128, 98, 98, 73, 141, 151, 148, 130, 120, 195, 65, 185, 146, 168, 109, 121, 94, 94, 138, 150, 71, 126, 129, 110, 93, 157, 105, 103, 105, 191, 137, 127, 123, 127, 106, 122, 136, 61, 122, 129, 79, 125, 135, 152, 144, 68, 138, 128, 79, 87, 171, 126, 175, 75, 100, 123, 146, 132, 124, 172, 51, 115, 119, 119, 53, 130, 45, 99, 125, 213, 124, 190, 127, 141, 143, 215, 116, 198, 160, 188, 114, 127, 151, 93, 139, 158, 174, 192, 96, 155, 92, 92, 117, 175, 125, 74, 149, 173, 83, 205, 176, 115, 107, 109, 88, 123, 171, 195, 174, 132, 49, 147, 108, 162, 127, 52, 153, 121, 108, 134, 113, 134, 117, 121, 132, 138, 149, 144, 171, 110, 141, 122, 178, 118, 139, 110, 118])
    }

    fn input_image_34x34_y() -> Vec<u8> {
        Vec::from([145, 40, 167, 227, 102, 90, 19, 20, 186, 107, 58, 12, 36, 181, 101, 87, 219, 250, 74, 1, 169, 243, 81, 226, 77, 92, 141, 170, 205, 10, 106, 60, 203, 228, 93, 189, 83, 195, 177, 124, 140, 248, 17, 71, 103, 115, 31, 213, 160, 21, 45, 39, 210, 13, 224, 158, 127, 139, 222, 231, 62, 192, 91, 135, 65, 179, 162, 111, 52, 30, 23, 234, 230, 2, 214, 14, 80, 187, 239, 121, 150, 19, 33, 216, 155, 117, 134, 204, 66, 74, 65, 80, 109, 94, 243, 82, 143, 77, 78, 199, 64, 23, 31, 220, 104, 157, 121, 8, 169, 95, 44, 43, 146, 253, 222, 47, 255, 69, 249, 118, 57, 16, 248, 84, 90, 160, 186, 54, 175, 127, 5, 159, 85, 1, 141, 20, 71, 101, 164, 128, 49, 83, 193, 179, 131, 227, 62, 36, 28, 244, 9, 2, 61, 254, 55, 221, 234, 27, 183, 116, 180, 252, 191, 3, 151, 90, 249, 122, 118, 160, 137, 254, 112, 39, 221, 225, 141, 100, 88, 65, 229, 8, 38, 174, 68, 98, 162, 255, 36, 135, 82, 143, 150, 72, 138, 175, 115, 86, 124, 139, 111, 142, 239, 4, 136, 29, 104, 91, 25, 121, 41, 5, 129, 145, 206, 236, 179, 58, 128, 164, 83, 109, 220, 80, 24, 209, 107, 13, 131, 216, 2, 197, 27, 211, 101, 171, 215, 108, 28, 67, 32, 147, 216, 235, 205, 166, 253, 121, 143, 214, 170, 231, 202, 11, 237, 66, 140, 1, 158, 108, 41, 134, 54, 145, 7, 119, 242, 62, 65, 23, 223, 8, 136, 97, 206, 164, 247, 13, 252, 106, 250, 149, 180, 19, 239, 43, 246, 40, 92, 17, 204, 142, 25, 155, 238, 249, 193, 154, 21, 215, 162, 169, 182, 228, 167, 101, 232, 67, 135, 57, 188, 178, 189, 47, 225, 75, 160, 71, 168, 173, 102, 237, 64, 66, 143, 41, 238, 164, 216, 46, 57, 96, 234, 30, 51, 110, 14, 18, 116, 10, 106, 224, 39, 71, 109, 204, 99, 135, 61, 60, 68, 86, 141, 139, 250, 203, 188, 251, 136, 209, 133, 1, 228, 202, 87, 66, 11, 18, 122, 73, 221, 240, 34, 148, 195, 236, 30, 200, 199, 79, 110, 254, 71, 184, 93, 230, 134, 27, 193, 127, 224, 178, 44, 253, 191, 144, 15, 49, 20, 111, 170, 209, 179, 149, 172, 118, 233, 227, 245, 74, 154, 250, 63, 138, 32, 219, 114, 168, 183, 169, 29, 181, 165, 108, 92, 123, 255, 50, 94, 102, 22, 5, 220, 175, 89, 177, 201, 124, 28, 188, 10, 207, 75, 237, 213, 54, 252, 211, 60, 79, 132, 128, 200, 182, 173, 186, 196, 71, 49, 149, 51, 142, 120, 99, 82, 83, 91, 44, 204, 104, 217, 116, 158, 140, 78, 148, 121, 50, 161, 254, 85, 7, 226, 239, 63, 12, 195, 10, 98, 81, 199, 88, 187, 167, 94, 166, 225, 75, 210, 181, 165, 197, 228, 162, 6, 143, 206, 23, 251, 233, 170, 109, 219, 240, 113, 134, 56, 201, 77, 246, 8, 89, 159, 144, 122, 227, 76, 108, 252, 200, 248, 8, 179, 92, 73, 135, 231, 114, 222, 104, 125, 84, 243, 247, 199, 216, 102, 206, 221, 27, 147, 138, 254, 235, 198, 129, 90, 63, 68, 210, 191, 172, 96, 37, 71, 61, 130, 98, 185, 124, 100, 79, 161, 151, 67, 204, 25, 189, 43, 207, 246, 19, 110, 119, 137, 69, 34, 35, 91, 75, 20, 128, 52, 132, 188, 12, 77, 113, 211, 232, 54, 152, 208, 239, 168, 4, 104, 243, 188, 24, 250, 11, 135, 69, 191, 142, 70, 200, 238, 82, 236, 211, 254, 80, 234, 177, 163, 155, 6, 121, 113, 161, 33, 40, 149, 230, 133, 100, 10, 208, 176, 187, 117, 201, 68, 77, 144, 252, 221, 209, 173, 148, 132, 107, 112, 2, 153, 85, 44, 220, 165, 61, 78, 66, 218, 115, 159, 38, 97, 130, 14, 190, 240, 160, 52, 172, 226, 95, 178, 162, 182, 101, 81, 75, 106, 153, 132, 146, 166, 39, 157, 75, 243, 138, 126, 40, 206, 232, 50, 19, 80, 242, 251, 53, 209, 134, 170, 215, 17, 190, 113, 248, 212, 25, 152, 217, 99, 145, 63, 33, 204, 105, 148, 7, 82, 98, 56, 192, 177, 202, 199, 233, 89, 144, 142, 230, 237, 114, 187, 231, 197, 194, 168, 254, 154, 238, 155, 139, 123, 179, 188, 201, 222, 59, 151, 122, 120, 4, 193, 24, 48, 118, 93, 203, 143, 216, 226, 73, 35, 248, 88, 244, 206, 194, 221, 72, 78, 1, 21, 233, 139, 10, 46, 106, 208, 242, 120, 159, 24, 123, 128, 175, 200, 62, 99, 129, 70, 15, 32, 43, 187, 48, 77, 150, 180, 147, 66, 3, 210, 65, 2, 122, 58, 137, 103, 240, 27, 82, 141, 41, 191, 183, 202, 158, 142, 90, 243, 188, 4, 95, 220, 42, 45, 8, 84, 5, 93, 166, 39, 185, 118, 25, 75, 54, 9, 208, 71, 3, 189, 186, 63, 194, 107, 109, 33, 37, 22, 213, 111, 68, 222, 238, 112, 157, 201, 204, 139, 143, 104, 93, 203, 43, 171, 87, 30, 108, 102, 137, 236, 193, 141, 160, 19, 23, 142, 177, 72, 219, 205, 229, 21, 187, 115, 235, 224, 248, 220, 237, 44, 195, 179, 118, 47, 212, 155, 12, 207, 96, 65, 136, 36, 61, 18, 79, 10, 17, 56, 100, 129, 221, 150, 134, 174, 133, 218, 198, 163, 56, 31, 73, 212, 159, 47, 44, 155, 18, 129, 77, 213, 164, 8, 23, 196, 202, 36, 253, 223, 10, 88, 184, 149, 222, 42, 170, 144, 119, 9, 16, 189, 168, 116, 239, 50, 191, 46, 28, 158, 160, 37, 125, 43, 235, 240, 140, 86, 156, 38, 217, 27, 45, 179, 134, 228, 5, 124, 4, 54, 238, 121, 221, 89, 130, 131, 26, 252, 227, 67, 52, 246, 229, 87, 81, 53, 117, 140, 136, 102, 172, 10, 194, 122, 145, 160, 149, 253, 186, 19, 72, 30, 47, 95, 103, 143, 53])
    }

    fn input_image_34x34() -> Vec<u8> {
        Vec::from([145, 88, 218, 40, 50, 208, 167, 237, 171, 227, 236, 6, 102, 27, 142, 90, 3, 251, 19, 118, 86, 20, 172, 242, 186, 200, 196, 107, 76, 32, 58, 191, 164, 12, 198, 202, 36, 221, 61, 181, 7, 82, 101, 134, 25, 87, 146, 104, 219, 79, 75, 250, 223, 151, 74, 188, 163, 1, 184, 225, 169, 11, 5, 243, 161, 33, 81, 123, 94, 226, 99, 72, 77, 209, 155, 92, 185, 136, 141, 112, 199, 170, 238, 96, 205, 175, 117, 10, 89, 149, 106, 240, 247, 60, 180, 66, 9, 197, 122, 174, 116, 168, 203, 46, 144, 228, 157, 183, 93, 143, 53, 189, 254, 120, 83, 18, 67, 195, 130, 133, 177, 70, 84, 124, 215, 98, 140, 97, 212, 248, 246, 64, 17, 253, 114, 71, 166, 206, 103, 22, 29, 115, 68, 78, 31, 4, 100, 213, 85, 16, 160, 49, 63, 21, 182, 37, 45, 244, 125, 39, 24, 165, 210, 108, 193, 13, 38, 48, 224, 241, 95, 158, 54, 73, 127, 153, 59, 139, 51, 159, 222, 128, 113, 231, 154, 55, 62, 207, 147, 192, 26, 110, 91, 137, 69, 135, 211, 152, 249, 132, 41, 8, 56, 220, 65, 15, 105, 179, 217, 216, 162, 47, 34, 111, 57, 178, 52, 232, 201, 30, 173, 43, 23, 176, 235, 234, 233, 190, 230, 119, 44, 2, 148, 229, 214, 156, 131, 14, 35, 109, 80, 42, 129, 187, 245, 28, 239, 255, 194, 121, 126, 138, 150, 252, 204, 19, 171, 177, 33, 152, 165, 216, 218, 56, 155, 156, 79, 117, 195, 15, 134, 168, 40, 204, 39, 139, 66, 70, 226, 74, 107, 88, 65, 191, 53, 80, 17, 99, 109, 224, 133, 94, 229, 202, 243, 81, 149, 82, 72, 247, 166, 138, 161, 214, 215, 132, 143, 201, 113, 77, 22, 115, 78, 96, 178, 199, 235, 162, 64, 29, 73, 23, 12, 123, 31, 212, 98, 220, 174, 194, 104, 151, 58, 157, 173, 237, 121, 37, 211, 8, 240, 63, 169, 10, 158, 95, 111, 245, 44, 208, 239, 43, 60, 112, 146, 250, 142, 253, 67, 198, 222, 110, 91, 47, 21, 241, 255, 124, 190, 69, 231, 41, 249, 181, 59, 118, 129, 14, 57, 89, 228, 16, 184, 187, 248, 206, 213, 84, 196, 114, 90, 251, 197, 160, 236, 189, 186, 13, 137, 54, 86, 230, 144, 207, 38, 51, 130, 18, 175, 120, 30, 127, 103, 167, 5, 3, 238, 159, 170, 135, 85, 163, 125, 1, 24, 102, 141, 188, 148, 20, 217, 147, 71, 7, 42, 101, 150, 75, 164, 154, 203, 128, 34, 153, 49, 192, 122, 83, 140, 92, 193, 87, 246, 179, 25, 108, 131, 100, 252, 227, 4, 68, 62, 242, 176, 36, 145, 225, 28, 50, 105, 244, 219, 48, 9, 209, 200, 2, 232, 45, 61, 76, 119, 254, 52, 136, 55, 97, 126, 221, 11, 172, 234, 180, 210, 27, 223, 6, 183, 93, 35, 116, 182, 185, 26, 32, 106, 205, 233, 46, 180, 125, 253, 252, 50, 23, 191, 245, 189, 3, 166, 159, 151, 78, 223, 90, 233, 218, 249, 44, 165, 122, 157, 21, 118, 54, 167, 160, 242, 123, 137, 22, 193, 254, 188, 228, 112, 147, 127, 39, 163, 199, 221, 237, 134, 225, 227, 149, 141, 20, 62, 100, 208, 183, 88, 26, 156, 65, 130, 43, 229, 119, 102, 8, 55, 96, 38, 251, 186, 174, 42, 66, 68, 231, 132, 98, 201, 210, 162, 71, 85, 255, 110, 176, 36, 250, 181, 135, 33, 170, 82, 17, 70, 143, 144, 178, 190, 244, 169, 232, 94, 76, 150, 79, 103, 72, 222, 187, 138, 235, 196, 175, 184, 203, 115, 37, 226, 86, 234, 97, 124, 48, 75, 139, 19, 30, 111, 11, 113, 142, 192, 202, 239, 7, 95, 4, 73, 114, 136, 16, 105, 29, 116, 61, 104, 46, 146, 91, 52, 155, 25, 246, 59, 121, 219, 204, 41, 168, 177, 5, 57, 158, 129, 207, 64, 145, 243, 194, 206, 56, 49, 236, 238, 241, 179, 99, 230, 58, 173, 224, 128, 10, 148, 164, 92, 195, 83, 248, 69, 109, 47, 87, 220, 18, 63, 80, 126, 185, 31, 12, 247, 117, 35, 84, 24, 140, 106, 209, 213, 9, 107, 182, 240, 13, 74, 200, 131, 89, 6, 216, 198, 214, 2, 45, 53, 197, 152, 161, 27, 205, 217, 211, 40, 154, 101, 120, 34, 171, 212, 81, 215, 133, 51, 108, 172, 77, 28, 15, 93, 67, 153, 1, 32, 14, 60, 147, 120, 233, 216, 70, 248, 235, 55, 56, 205, 139, 201, 166, 16, 96, 253, 251, 111, 121, 83, 171, 143, 199, 183, 214, 84, 26, 170, 88, 73, 231, 156, 177, 202, 222, 63, 11, 190, 58, 237, 59, 191, 66, 132, 203, 148, 131, 51, 133, 35, 184, 140, 72, 107, 1, 6, 163, 158, 208, 175, 108, 229, 85, 41, 102, 195, 134, 34, 95, 54, 210, 200, 145, 165, 91, 7, 126, 117, 119, 104, 141, 242, 46, 5, 62, 116, 45, 65, 224, 137, 23, 254, 174, 223, 128, 15, 8, 110, 196, 136, 82, 37, 97, 146, 221, 206, 255, 212, 164, 185, 33, 247, 151, 219, 13, 127, 9, 252, 194, 89, 106, 79, 197, 250, 27, 86, 149, 218, 240, 180, 209, 50, 19, 24, 52, 239, 31, 217, 43, 220, 159, 246, 28, 78, 40, 213, 207, 115, 124, 12, 243, 29, 114, 92, 69, 227, 17, 74, 38, 204, 44, 20, 142, 14, 10, 25, 48, 234, 155, 157, 241, 238, 30, 98, 249, 22, 100, 193, 53, 144, 154, 123, 60, 21, 153, 90, 215, 161, 49, 162, 244, 80, 169, 129, 4, 182, 152, 77, 228, 211, 122, 167, 181, 192, 101, 3, 125, 232, 39, 113, 67, 64, 42, 135, 18, 94, 57, 230, 118, 188, 150, 99, 178, 2, 87, 189, 105, 138, 47, 81, 226, 225, 198, 61, 75, 236, 68, 160, 36, 186, 71, 172, 109, 168, 112, 179, 173, 32, 245, 130, 187, 76, 103, 93, 176, 102, 131, 54, 237, 183, 53, 64, 156, 140, 66, 248, 148, 143, 113, 129, 41, 147, 80, 238, 132, 5, 164, 176, 13, 216, 150, 34, 46, 153, 212, 57, 127, 77, 96, 226, 45, 234, 172, 8, 30, 177, 145, 51, 100, 12, 110, 33, 144, 14, 26, 230, 18, 112, 25, 116, 187, 146, 10, 233, 75, 106, 98, 231, 224, 94, 92, 39, 159, 158, 71, 124, 88, 109, 173, 253, 204, 122, 229, 99, 44, 2, 135, 119, 221, 61, 32, 7, 60, 210, 189, 68, 72, 225, 86, 157, 117, 220, 15, 105, 180, 23, 121, 141, 52, 191, 139, 73, 178, 250, 218, 59, 203, 138, 142, 188, 137, 242, 251, 196, 199, 136, 128, 83, 209, 3, 222, 133, 11, 58, 1, 29, 179, 228, 4, 85, 202, 190, 187, 87, 141, 196, 66, 147, 39, 11, 215, 2, 18, 59, 238, 122, 25, 198, 73, 45, 100, 221, 203, 186, 240, 40, 180, 34, 173, 4, 148, 247, 67, 195, 166, 129, 236, 151, 58, 30, 146, 222, 200, 246, 128, 199, 106, 81, 79, 130, 152, 110, 162, 51, 254, 53, 14, 71, 60, 251, 184, 197, 88, 239, 95, 155, 82, 156, 161, 93, 99, 33, 230, 78, 56, 134, 234, 103, 27, 242, 249, 193, 121, 19, 127, 136, 41, 224, 42, 105, 178, 235, 107, 44, 223, 1, 253, 54, 248, 191, 228, 77, 144, 216, 13, 15, 112, 202, 49, 131, 3, 20, 133, 84, 111, 171, 140, 170, 194, 142, 209, 104, 83, 179, 70, 212, 149, 125, 68, 172, 153, 218, 118, 210, 8, 233, 231, 85, 227, 98, 101, 245, 167, 17, 74, 139, 217, 154, 164, 205, 250, 243, 48, 63, 252, 160, 138, 119, 214, 32, 96, 226, 219, 37, 244, 145, 38, 76, 47, 120, 26, 114, 206, 232, 168, 46, 69, 183, 143, 36, 169, 55, 117, 29, 204, 159, 181, 192, 126, 165, 24, 97, 108, 86, 6, 92, 16, 229, 123, 72, 113, 255, 31, 80, 50, 211, 90, 94, 174, 12, 102, 91, 43, 22, 158, 137, 5, 241, 115, 220, 135, 9, 175, 61, 57, 89, 64, 7, 177, 132, 116, 201, 157, 150, 124, 23, 163, 28, 189, 185, 188, 225, 21, 10, 182, 208, 207, 62, 109, 75, 52, 65, 237, 35, 176, 213, 255, 5, 54, 87, 123, 252, 238, 25, 211, 185, 223, 65, 177, 124, 208, 1, 190, 60, 184, 241, 79, 191, 221, 132, 192, 84, 128, 153, 247, 200, 188, 202, 182, 20, 86, 173, 42, 100, 186, 35, 248, 196, 107, 27, 71, 198, 55, 49, 64, 242, 149, 146, 244, 51, 92, 30, 142, 22, 108, 120, 69, 227, 99, 61, 220, 82, 249, 70, 83, 46, 154, 91, 133, 21, 44, 28, 137, 204, 171, 145, 104, 52, 175, 217, 105, 96, 116, 13, 114, 158, 97, 174, 140, 179, 31, 78, 189, 139, 148, 157, 40, 121, 106, 213, 50, 180, 237, 161, 250, 253, 254, 151, 66, 209, 127, 117, 36, 68, 236, 85, 141, 126, 7, 37, 3, 226, 125, 39, 239, 150, 207, 63, 129, 14, 12, 164, 112, 195, 155, 62, 10, 147, 169, 98, 163, 215, 81, 15, 45, 199, 243, 29, 88, 24, 176, 187, 152, 102, 167, 9, 131, 94, 160, 76, 166, 224, 235, 225, 4, 172, 75, 93, 212, 210, 2, 11, 181, 229, 74, 165, 53, 216, 197, 16, 58, 228, 231, 119, 162, 218, 101, 6, 95, 118, 143, 234, 183, 206, 232, 67, 23, 17, 193, 251, 33, 136, 233, 203, 115, 170, 48, 230, 109, 34, 72, 47, 80, 168, 18, 57, 41, 219, 130, 90, 240, 156, 222, 113, 111, 214, 134, 26, 38, 56, 138, 32, 201, 245, 59, 77, 43, 110, 246, 73, 19, 8, 194, 205, 89, 103, 135, 159, 178, 122, 144, 145, 241, 122, 66, 245, 227, 55, 146, 76, 103, 193, 108, 5, 159, 252, 11, 134, 200, 112, 153, 248, 167, 201, 8, 24, 136, 179, 3, 234, 92, 249, 158, 73, 21, 220, 135, 229, 51, 231, 237, 155, 114, 9, 116, 222, 93, 150, 104, 174, 80, 125, 56, 16, 84, 233, 183, 243, 140, 29, 247, 86, 42, 154, 47, 144, 26, 156, 181, 199, 244, 15, 216, 250, 202, 102, 53, 228, 206, 70, 1, 221, 238, 46, 27, 120, 72, 147, 253, 107, 138, 217, 59, 254, 165, 49, 235, 213, 32, 198, 31, 17, 129, 83, 194, 90, 197, 105, 63, 169, 226, 68, 164, 64, 210, 106, 74, 191, 36, 162, 172, 219, 99, 96, 143, 23, 37, 218, 180, 71, 175, 170, 61, 176, 224, 130, 7, 14, 98, 28, 60, 185, 149, 87, 124, 109, 30, 100, 88, 94, 79, 163, 95, 161, 121, 240, 151, 33, 195, 67, 10, 131, 204, 139, 123, 209, 6, 40, 184, 118, 65, 25, 255, 230, 189, 187, 18, 43, 160, 251, 207, 215, 127, 246, 85, 81, 19, 115, 97, 110, 148, 50, 119, 4, 186, 137, 89, 212, 69, 177, 166, 34, 214, 62, 35, 133, 101, 91, 111, 39, 75, 190, 236, 20, 41, 157, 128, 171, 223, 52, 38, 203, 132, 242, 205, 188, 117, 141, 12, 225, 78, 77, 2, 57, 113, 178, 58, 211, 13, 44, 232, 82, 173, 54, 48, 196, 152, 45, 192, 208, 142, 126, 239, 182, 22, 168, 143, 248, 4, 212, 35, 104, 31, 224, 243, 91, 217, 84, 179, 193, 175, 242, 237, 188, 158, 16, 24, 30, 139, 250, 39, 247, 11, 7, 152, 135, 122, 210, 69, 90, 88, 191, 129, 26, 142, 140, 50, 70, 253, 146, 200, 245, 138, 238, 34, 29, 82, 168, 73, 236, 65, 126, 211, 145, 120, 254, 54, 205, 80, 227, 244, 234, 58, 56, 177, 171, 251, 163, 46, 207, 155, 36, 108, 6, 199, 41, 121, 109, 203, 113, 239, 13, 161, 213, 22, 33, 94, 103, 40, 60, 206, 149, 141, 216, 230, 23, 166, 133, 53, 170, 100, 111, 12, 10, 105, 47, 208, 89, 96, 110, 67, 185, 150, 255, 164, 176, 99, 154, 187, 181, 1, 117, 222, 62, 201, 197, 8, 68, 137, 25, 77, 55, 147, 144, 21, 98, 252, 232, 151, 221, 27, 186, 209, 20, 32, 173, 223, 127, 148, 57, 167, 132, 228, 195, 107, 124, 231, 112, 128, 63, 2, 92, 19, 153, 15, 125, 85, 118, 204, 44, 45, 194, 220, 235, 184, 165, 74, 189, 61, 123, 233, 78, 225, 215, 66, 106, 169, 218, 119, 17, 115, 116, 198, 159, 76, 18, 38, 83, 102, 97, 229, 136, 130, 49, 37, 14, 219, 5, 190, 114, 183, 71, 249, 157, 3, 241, 9, 240, 64, 86, 160, 156, 48, 52, 79, 246, 172, 42, 72, 226, 202, 59, 95, 214, 43, 178, 192, 93, 162, 131, 180, 182, 51, 196, 101, 174, 134, 81, 28, 87, 75, 244, 129, 106, 125, 133, 153, 35, 22, 132, 68, 176, 146, 29, 216, 166, 94, 66, 39, 124, 234, 157, 178, 57, 75, 228, 247, 243, 96, 44, 138, 213, 159, 126, 183, 227, 40, 186, 249, 206, 51, 225, 232, 16, 175, 50, 32, 78, 19, 211, 224, 80, 115, 69, 242, 100, 70, 251, 28, 90, 53, 226, 88, 38, 117, 141, 149, 52, 5, 209, 200, 23, 134, 127, 121, 170, 2, 150, 215, 160, 104, 17, 196, 26, 190, 205, 54, 113, 55, 236, 248, 3, 83, 212, 43, 30, 25, 171, 60, 152, 191, 103, 217, 109, 240, 99, 173, 181, 145, 65, 223, 63, 18, 218, 33, 12, 119, 204, 111, 85, 105, 214, 180, 148, 64, 235, 7, 21, 72, 82, 58, 46, 98, 172, 250, 56, 182, 77, 192, 67, 42, 177, 162, 184, 202, 255, 49, 199, 221, 161, 233, 62, 1, 89, 229, 41, 144, 208, 76, 142, 61, 167, 230, 135, 9, 95, 137, 131, 11, 79, 185, 237, 45, 116, 114, 158, 27, 187, 165, 34, 231, 169, 252, 197, 140, 210, 194, 147, 13, 168, 36, 101, 254, 110, 8, 154, 91, 164, 238, 156, 47, 155, 71, 92, 139, 107, 74, 123, 136, 239, 179, 102, 207, 188, 20, 195, 201, 163, 219, 222, 86, 97, 59, 112, 253, 151, 14, 108, 122, 81, 245, 120, 37, 87, 4, 130, 174, 193, 241, 220, 24, 10, 84, 48, 246, 6, 118, 189, 128, 93, 15, 31, 203, 198, 73, 143, 143, 190, 216, 182, 28, 226, 204, 51, 73, 111, 168, 37, 30, 67, 76, 215, 114, 35, 134, 146, 248, 193, 38, 88, 108, 178, 244, 102, 238, 206, 253, 98, 194, 197, 57, 221, 189, 22, 72, 64, 167, 78, 153, 121, 1, 203, 156, 21, 247, 53, 233, 86, 165, 139, 109, 7, 10, 173, 40, 46, 125, 112, 106, 47, 116, 208, 223, 110, 242, 127, 50, 120, 177, 152, 159, 113, 130, 24, 192, 17, 123, 23, 80, 128, 252, 49, 175, 184, 232, 200, 71, 79, 62, 228, 63, 99, 246, 234, 129, 219, 140, 70, 104, 164, 15, 249, 211, 32, 94, 44, 43, 224, 169, 171, 155, 209, 126, 237, 172, 187, 154, 163, 48, 83, 201, 77, 136, 135, 150, 227, 26, 180, 179, 69, 147, 231, 115, 66, 132, 85, 3, 81, 74, 210, 239, 229, 65, 199, 101, 2, 96, 9, 122, 212, 161, 58, 218, 92, 137, 254, 131, 103, 198, 60, 240, 87, 251, 27, 16, 29, 82, 145, 107, 141, 59, 6, 41, 255, 222, 191, 55, 12, 183, 105, 97, 202, 31, 20, 158, 91, 18, 142, 186, 241, 90, 149, 207, 243, 61, 89, 188, 170, 236, 4, 235, 157, 95, 181, 174, 220, 52, 217, 42, 14, 162, 34, 196, 36, 195, 225, 33, 45, 11, 13, 8, 151, 214, 84, 124, 117, 5, 100, 160, 93, 56, 245, 166, 133, 68, 39, 230, 148, 185, 19, 213, 118, 250, 138, 25, 144, 205, 75, 176, 119, 54, 27, 119, 9, 120, 246, 208, 53, 131, 71, 83, 178, 3, 250, 169, 189, 247, 126, 186, 75, 64, 63, 223, 127, 194, 57, 124, 107, 241, 181, 109, 97, 51, 33, 86, 1, 37, 185, 103, 22, 16, 80, 213, 88, 211, 111, 69, 82, 68, 99, 114, 222, 85, 101, 238, 147, 209, 112, 154, 145, 157, 146, 242, 67, 81, 84, 215, 6, 4, 201, 244, 32, 204, 214, 190, 139, 98, 153, 143, 46, 8, 104, 60, 199, 93, 122, 38, 203, 73, 164, 43, 149, 183, 171, 184, 254, 87, 125, 159, 30, 192, 11, 108, 105, 95, 102, 117, 40, 137, 7, 232, 236, 110, 113, 193, 156, 41, 141, 245, 76, 160, 128, 166, 19, 28, 135, 23, 25, 140, 142, 252, 55, 177, 231, 206, 72, 180, 58, 219, 255, 196, 205, 168, 74, 229, 188, 132, 21, 172, 148, 187, 91, 94, 115, 39, 78, 235, 167, 225, 224, 13, 5, 248, 42, 49, 52, 59, 144, 227, 162, 54, 220, 216, 163, 237, 15, 48, 44, 176, 2, 195, 198, 26, 179, 158, 228, 118, 197, 121, 47, 253, 191, 212, 34, 210, 155, 233, 66, 12, 89, 217, 207, 24, 90, 96, 31, 165, 65, 170, 251, 136, 226, 152, 36, 173, 240, 61, 62, 14, 18, 138, 92, 79, 234, 20, 10, 130, 106, 17, 202, 116, 56, 50, 239, 100, 29, 249, 129, 161, 230, 221, 123, 70, 150, 45, 175, 134, 77, 243, 174, 200, 182, 133, 151, 35, 218, 61, 68, 198, 210, 248, 163, 181, 40, 56, 32, 49, 64, 75, 19, 133, 29, 139, 31, 126, 66, 73, 137, 206, 212, 175, 132, 159, 138, 82, 47, 231, 153, 44, 197, 200, 155, 204, 244, 18, 208, 33, 129, 30, 74, 77, 176, 72, 213, 84, 11, 164, 60, 35, 8, 99, 70, 23, 94, 135, 196, 180, 39, 202, 17, 58, 36, 214, 15, 253, 65, 224, 223, 51, 105, 10, 128, 174, 88, 118, 112, 184, 13, 100, 149, 166, 90, 222, 162, 6, 42, 216, 106, 170, 146, 63, 144, 59, 83, 119, 22, 103, 9, 92, 76, 16, 173, 98, 189, 236, 209, 168, 3, 78, 114, 185, 161, 177, 151, 192, 116, 157, 218, 239, 190, 193, 50, 24, 14, 191, 110, 142, 46, 25, 203, 28, 215, 172, 158, 188, 178, 160, 120, 255, 37, 80, 169, 125, 242, 241, 43, 95, 219, 235, 183, 225, 240, 233, 230, 140, 141, 115, 86, 123, 145, 156, 143, 111, 38, 102, 108, 217, 93, 71, 27, 171, 55, 45, 136, 201, 179, 122, 148, 134, 207, 150, 228, 247, 245, 5, 165, 12, 124, 62, 194, 4, 195, 57, 54, 205, 7, 238, 199, 251, 121, 21, 91, 221, 182, 1, 89, 48, 152, 130, 186, 113, 97, 147, 249, 232, 2, 254, 131, 85, 41, 26, 107, 154, 252, 226, 250, 227, 109, 69, 67, 167, 220, 52, 79, 243, 246, 187, 101, 229, 34, 20, 87, 104, 234, 81, 127, 237, 53, 211, 96, 117, 110, 151, 140, 38, 132, 136, 167, 93, 102, 242, 225, 172, 179, 244, 10, 69, 33, 194, 176, 168, 122, 238, 26, 145, 22, 237, 160, 111, 36, 149, 49, 208, 253, 233, 82, 186, 67, 196, 19, 64, 17, 72, 152, 189, 30, 62, 220, 47, 92, 24, 95, 211, 20, 103, 28, 127, 143, 121, 44, 53, 119, 216, 90, 27, 215, 5, 56, 83, 254, 212, 204, 58, 131, 202, 80, 97, 181, 241, 191, 164, 39, 230, 120, 86, 247, 228, 229, 187, 235, 104, 182, 192, 74, 173, 43, 76, 77, 118, 6, 201, 169, 101, 219, 133, 198, 213, 207, 255, 1, 155, 109, 177, 84, 190, 52, 32, 107, 57, 79, 175, 61, 116, 223, 105, 159, 171, 206, 15, 23, 197, 12, 170, 11, 165, 94, 66, 37, 184, 112, 245, 153, 236, 13, 139, 217, 125, 163, 209, 157, 96, 134, 124, 154, 100, 150, 199, 70, 252, 232, 46, 248, 135, 226, 42, 158, 106, 40, 9, 141, 147, 224, 249, 221, 195, 68, 14, 146, 222, 166, 240, 31, 200, 239, 98, 78, 126, 35, 81, 51, 59, 144, 218, 183, 123, 75, 108, 73, 41, 87, 193, 60, 250, 54, 4, 55, 185, 99, 8, 246, 148, 21, 85, 91, 234, 156, 128, 251, 162, 25, 16, 203, 45, 138, 210, 227, 89, 113, 2, 88, 243, 214, 117, 174, 205, 231, 3, 180, 7, 48, 142, 161, 50, 188, 130, 29, 34, 137, 114, 115, 71, 63, 129, 18, 65, 178, 202, 76, 168, 5, 84, 102, 77, 81, 234, 27, 105, 68, 12, 124, 155, 253, 50])
    }
}